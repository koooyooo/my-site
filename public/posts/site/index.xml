<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Site on Koyo&#39;s Blog</title>
    <link>https://www.dm-on.info/posts/site/</link>
    <description>Recent content in Site on Koyo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 Nov 2020 22:44:51 +0900</lastBuildDate><atom:link href="https://www.dm-on.info/posts/site/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo Gcs</title>
      <link>https://www.dm-on.info/posts/site/hugo-gcs/</link>
      <pubDate>Sun, 29 Nov 2020 22:44:51 +0900</pubDate>
      
      <guid>https://www.dm-on.info/posts/site/hugo-gcs/</guid>
      <description>ローカル起動 Hugo ローカルサーバの起動は非常に簡単で、以下のコマンドを実行するだけです。規定のポートは1313であるため http://localhost:1313にアクセスすれば編集中のサイトをリアルタイムに閲覧することができます。エディタで編集中の文書を保存すれば閲覧中のページがリロードなしで更新されます (データバインディング)。
$ hugo serve -D 静的コンテンツ生成 生成 また、サーバー機能は不要なので生成されたWebコンテンツだけが欲しいという場合もあると思います。その場合は以下のコマンドを入力することで、直下の publicディレクトリ配下にHTML等のWebコンテンツが出力されます。
$ hugo 提供 例えば、この状態でpublicディレクトリをマウントさせた Nginxを起動させれば http://localhost:80 でコンテンツを提供することができます。
$ docker run -p 80:80 -v $(pwd)/public:/usr/share/nginx/html nginx これを利用して、以下の様な Dockerfileを用意し DockerImage内にコンテンツを固めたものをDockerベースで配信というのも一つの考えです。
FROMnginx:1.19-alpineCOPY ./public /usr/share/nginx/htmlEXPOSE80CMD [&amp;#34;nginx&amp;#34;, &amp;#34;-g&amp;#34;, &amp;#34;daemon off;&amp;#34;]$ docker build -t nginx-hugo . $ docker container run --rm --name nginx-hugo -p 80:80 nginx-hugo ただ今回は、配信の度に以下の作業を行うのが少々面倒かも知れないと考え、Dockerベースの配信(当初CloudRunを想定)を止めました。とはいえ構成はシンプルなのでアイデアとしては悪くないと思います。
 コンテンツの生成 イメージのビルド イメージのレジストリ登録 サービスの参照先イメージの変更  実は、Hugoのデプロイ先は、GitHubPagesが有名なのですが、今回試したら生成されたリンクのURLに問題があり(一部URL要素が重複生成された)上手くページ遷移できないという問題があったため、その他の手段を探したという経緯があります。
 GCS 今回着目したのは GCS (GoogleCloudStorage) による提供です。GCSは Amazon S3の様なオブジェクトストレージで、S3同様に静的コンテンツをインターネット公開する機能も備わっています。またS3同様にランニングコストが非常に低価格です。長期的な視野で考えるとこの点は魅力です。
プロジェクト作成 GCSでのサイト管理をすると決めたら、GCPプロジェクトを作成します。GCSの世界ではプロダクト毎にプロジェクトを作成するというのがベストプラクティスになっているため、静的サイトの構築程度でも1プロジェクトを用意します。一度GCPを使った事があるのであれば決済手段の登録等が不要ですので簡易的な手続きのみで完了します。</description>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>https://www.dm-on.info/posts/site/hugo/</link>
      <pubDate>Sat, 28 Nov 2020 13:28:21 +0900</pubDate>
      
      <guid>https://www.dm-on.info/posts/site/hugo/</guid>
      <description>Intro Hugoでサイトを作成してみました。実際に作ってみるととても軽量なサイトになっているので驚きです。元々はWordPressでサイトを作成しようと考えていたのですが、WordPressの場合コンテンツの管理にMySQLを利用するため、維持費の面で年に1万円前後かかってしまうというのがネックでした。
また、はてなブログPro等も検討し、こちらのほうがトータルでは安価で手軽なのですが、やはり自由度の面で一定の制限が掛かってしまいます (大抵の人には十分な自由度とは思いますが)
基本的には静的コンテンツを配信するだけなので、特段リッチな基盤は必要ありません。Webサーバ上にHTMLを置くだけでも良いわけです。特に、昨今はApache,NginxベースのWebサーバを立てないでも配信する手段があります。GitHubPagesを利用しても良いですし、Amazon S3 や Google Cloud Storageといった Cloud上のストレージサービスに配信機能がありますので、その中にコンテンツを配備し設定を公開とするだけで安価に配信可能な訳です。
Hugo Hugo自体は、静的サイトジェネレーターと呼ばれるものです。静的サイトジェネレータの有名どころは Site Generators で確認できますが、Hugoは Golangでこれを実現したものとなります。多くの静的サイトジェネレータがJavaScriptを採用していますが、Golang製であるHugoは高速な処理に定評があります。
Markdown Hugoではコンテンツ(文章)をMarkdownとして記述します。 平易な記法でリッチなコンテンツを表現できるため、最近では多くのBlogサービスもMarkdown記法に対応してきていますが、Hugoを始めとした静的サイトジェネレータはMarkdownを主たる記法としてコンテンツを生成しています。
Static Site Generator 静的サイトジェネレータは「サイトは更新される回数より閲覧される回数の方が多いのだから、閲覧の度に動的なサイト生成する従来のツールは非効率だ、その代わりに更新時にサイトを生成して閲覧時には同じものを提示しよう」という発想によるものです。確かに閲覧時の処理負荷はかなり低い様で、各ページを高速に閲覧することができます。逆に、何らかの計算処理が必要な動的なページを生成しようと思ったら、静的サイトジェネレータには荷が重いということになります。
Initialize 基本的な利用法は色々ありますが、</description>
    </item>
    
  </channel>
</rss>
